AWSTemplateFormatVersion: 2010-09-09
Resources:
  BackendService:
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - subnet-0c4410c3f4bbdef9e
            - subnet-0996c00a702e7a303
            - subnet-0a0e40e7afdff2df3
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - BackendServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
        - Key: com.docker.compose.service
          Value: backend
      TaskDefinition:
        Ref: BackendTaskDefinition
    Type: AWS::ECS::Service
  BackendServiceDiscoveryEntry:
    Properties:
      Description: '"backend" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: backend
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  BackendTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-2.compute.internal
            - ecsblog-demo.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecsblog-demo
          Name: Backend_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Backend_ResolvConf_InitContainer
          Essential: true
          Image: docker.io/kaloyan84/starter-back:latest@sha256:959e058b82119a7f5dd373913e74c3dc1acedc98e590ac1bdc98917fa9745423
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecsblog-demo
          Name: backend
      Cpu: "256"
      ExecutionRoleArn:
        Ref: BackendTaskExecutionRole
      Family: ecsblog-demo-backend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  BackendTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
        - Key: com.docker.compose.service
          Value: backend
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project ecsblog-demo
      Name: ecsblog-demo.local
      Vpc: vpc-03d2b5bb009235212
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: ecsblog-demo
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
    Type: AWS::ECS::Cluster
  Default80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: frontend:80/tcp on default network
      FromPort: 80
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: ecsblog-demo Security Group for default network
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
        - Key: com.docker.compose.network
          Value: ecsblog-demo_default
      VpcId: vpc-03d2b5bb009235212
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  FrontendService:
    DependsOn:
      - FrontendTCP80Listener
      - BackendService
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn:
            Ref: FrontendTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - subnet-0c4410c3f4bbdef9e
            - subnet-0996c00a702e7a303
            - subnet-0a0e40e7afdff2df3
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - FrontendServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
        - Key: com.docker.compose.service
          Value: frontend
      TaskDefinition:
        Ref: FrontendTaskDefinition
    Type: AWS::ECS::Service
  FrontendServiceDiscoveryEntry:
    Properties:
      Description: '"frontend" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: frontend
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  FrontendTCP80Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: FrontendTCP80TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  FrontendTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
      TargetType: ip
      VpcId: vpc-03d2b5bb009235212
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  FrontendTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-2.compute.internal
            - ecsblog-demo.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecsblog-demo
          Name: Frontend_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Frontend_ResolvConf_InitContainer
          Essential: true
          Image: docker.io/kaloyan84/starter-front:latest@sha256:ad47228a27eabd5b64e02d551e5228f17779832c0373fdb64eb7c464900ce62c
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecsblog-demo
          Name: frontend
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: FrontendTaskExecutionRole
      Family: ecsblog-demo-frontend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  FrontendTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
        - Key: com.docker.compose.service
          Value: frontend
    Type: AWS::IAM::Role
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: DefaultNetwork
      Subnets:
        - subnet-0c4410c3f4bbdef9e
        - subnet-0996c00a702e7a303
        - subnet-0a0e40e7afdff2df3
      Tags:
        - Key: com.docker.compose.project
          Value: ecsblog-demo
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/ecsblog-demo
    Type: AWS::Logs::LogGroup